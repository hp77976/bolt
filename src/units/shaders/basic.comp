#version 460
#extension GL_EXT_ray_query : require
#extension GL_EXT_scalar_block_layout : enable

struct light_struct //16 bytes
{
	vec3 pos;
	uint type;
};

struct origin_struct //16 bytes
{
	vec3 pos;
	uint pad;
};

struct submit_struct //32 bytes
{
	//vec3 pos;
	//float mint;
	vec3 dir;
	uint light_index;
};

/*struct result_struct //16 bytes
{
	uint tri_index;
	uint uv; //two fp16s
	float dist;
	uint hit_light;
};*/

struct result_struct
{
	uint tri_index;
	uint uv;
	float dist;
	uint nxny;
	uint nzsx;
	uint sysz;
	uint txty;
	uint tzhit;
};

struct vertex_struct
{
	vec3 pos;
	uint __pad0;
	vec3 normal;
	uint __pad1;
};

layout(binding = 0) uniform accelerationStructureEXT tlas;
layout(std140, binding = 1) readonly buffer light_data {light_struct lights[];};
layout(std140, binding = 2) readonly buffer vertex_data {vertex_struct vertices[];};
layout(std140, binding = 3) buffer ray_pos {origin_struct positions[];};
layout(std140, binding = 4) readonly buffer submit {submit_struct s_data[];};
layout(std140, binding = 5) writeonly buffer result {result_struct r_data[];};

layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

void main()
{
	uint ix = gl_GlobalInvocationID.x;
	uint iy = gl_GlobalInvocationID.y;
	uint iz = gl_GlobalInvocationID.z;
	uint index = ix + iy * 2 + iz * 1 * 1;
	/*
		0,0,0 ->    0
		1,0,0 ->    1
		1,1,0 ->   33
		1,1,1 -> 1057
	*/
	uint flags = gl_RayFlagsOpaqueEXT; //| gl_RayFlagsTerminateOnFirstHitEXT;
	vec3 direction = s_data[index].dir;
	
	//vec3 origin = s_data[index].pos;
	vec3 origin = positions[index].pos;
	
	//float tmin = s_data[index].mint;
	float tmin = 1e-5f;

	rayQueryEXT rq;

	rayQueryInitializeEXT(
		rq,tlas,flags,
		0xFF,origin,tmin,
		direction,100000.0
	);

	while(rayQueryProceedEXT(rq));

	if(rayQueryGetIntersectionTypeEXT(rq,true) == gl_RayQueryCommittedIntersectionTriangleEXT)
	{
		float dist = rayQueryGetIntersectionTEXT(rq,true);
		r_data[index].dist = dist;
		r_data[index].tri_index = rayQueryGetIntersectionPrimitiveIndexEXT(rq,true);
		r_data[index].uv = packHalf2x16(rayQueryGetIntersectionBarycentricsEXT(rq,true));
		
		vec3 pos = dist * direction + origin;
		positions[index].pos = pos;
		vec3 dir2 = lights[0].pos - pos;
		float dist2 = length(dir2);
		float inv_dist = 1.0 / dist2;
		dir2 *= inv_dist;

		//////// barycentrics and other nonsense ////////

		uint tri_idx = rayQueryGetIntersectionPrimitiveIndexEXT(rq,true);
		
		uint t3 = tri_idx * 3;
		uint ti0 = t3 + 0;
		uint ti1 = t3 + 1;
		uint ti2 = t3 + 2;

		vec3 pa = vertices[ti0].pos;
		vec3 pb = vertices[ti1].pos;
		vec3 pc = vertices[ti2].pos;

		vec3 na = vertices[ti0].normal;
		vec3 nb = vertices[ti1].normal;
		vec3 nc = vertices[ti2].normal;

		vec3 s1 = pb - pa;

		vec2 uv = rayQueryGetIntersectionBarycentricsEXT(rq,true);

		float b1 = uv.x;
		float b2 = uv.y;
		float b0 = 1.0f - b1 - b2;
		vec3 bary = {b0,b1,b2};

		vec3 n = normalize(na*bary.x+nb*bary.y+nc*bary.z);
		vec3 dpdu = s1;

		vec3 sh_n = n;
		vec3 sh_s = normalize(dpdu - sh_n * dot(sh_n,dpdu));
		vec3 sh_t = cross(sh_n,sh_s);
				
		r_data[index].nxny = packHalf2x16(sh_n.xy);
		r_data[index].nzsx = packHalf2x16(vec2(sh_n.z,sh_s.x));
		r_data[index].sysz = packHalf2x16(sh_s.yz);
		r_data[index].txty = packHalf2x16(sh_t.xy);

		//////// direct light sampling ////////
		//the 'f' matters on these numbers, don't remove it
		rayQueryInitializeEXT(
			rq,tlas,flags,
			0xFF,pos,tmin+1e-7f,
			dir2,dist2 - 1e-7f
		);

		while(rayQueryProceedEXT(rq));

		float hit_light = 0.0;
		if(rayQueryGetIntersectionTypeEXT(rq,true) == gl_RayQueryCommittedIntersectionTriangleEXT)
		{
			//r_data[index].hit_light = 0;
			hit_light = 0.0;
		}
		else
		{
			//r_data[index].hit_light = 1;
			hit_light = 1.0;
		}

		//vec2 temp = {dist,hit_light};
		//r_data[index].dist_hit = packHalf2x16(temp);
		r_data[index].tzhit = packHalf2x16(vec2(sh_t.z,hit_light));
	}
	else //no hit, mark -1
	{
		//r_data[index].hit_light = 0;
		r_data[index].dist = -1.0;
		//vec2 temp = {-1.0,0.0};
		//r_data[index].dist_hit = packHalf2x16(temp);
		r_data[index].tzhit = packHalf2x16(vec2(0.0,0.0));
	}
};