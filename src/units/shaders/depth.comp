#version 460
#extension GL_EXT_ray_query : require

struct submit_data //32 bytes
{
	vec3 pos;
	float mint;

	vec3 dir;
	float maxt;
};

struct result_data //80 bytes
{
	vec3 pos;
	float dist;

	vec3 sh_n;
	uint tri_index;

	vec3 sh_s;
	uint light_index;

	vec3 sh_t;
	float light_odds;

	vec3 bary;
	float light_pdf;
};

struct light_data
{
	vec4 m[4];

	vec3 pos;
	int type;
};

struct vertex_struct
{
	vec3 pos;
	uint __pad0;
	vec3 normal;
	uint __pad1;
};

layout(binding = 0) uniform accelerationStructureEXT tlas;
//layout(std140, binding = 1) readonly buffer vert_data {vec4 positions[];};
layout(std140, binding = 1) readonly buffer vert_data {vertex_struct vertices[];};
//layout(std140, binding = 2) readonly buffer norm_data {vec4 normals[];};
layout(std140, binding = 2) readonly buffer light_input {light_data lights[];};
layout(std140, binding = 3) readonly buffer submit {submit_data s_data[];};
layout(std140, binding = 4) writeonly buffer result {result_data r_data[];};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main()
{
	uint ix = gl_GlobalInvocationID.x;
	vec3 origin = s_data[ix].pos;
	vec3 direction = s_data[ix].dir;
	float tmin = s_data[ix].mint;
	float tmax = s_data[ix].maxt;
	uint flags = gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT;

	rayQueryEXT rq;

	rayQueryInitializeEXT(
		rq,tlas,flags,
		0xFF,origin,tmin,
		direction,tmax
	);

	while(rayQueryProceedEXT(rq));

	if(rayQueryGetIntersectionTypeEXT(rq,true) == gl_RayQueryCommittedIntersectionTriangleEXT)
	{
		uint tri_idx = rayQueryGetIntersectionPrimitiveIndexEXT(rq,true);
		
		uint t3 = tri_idx * 3;
		uint ti0 = t3 + 0;
		uint ti1 = t3 + 1;
		uint ti2 = t3 + 2;

		vec3 pa = vertices[ti0].pos;
		vec3 pb = vertices[ti1].pos;
		vec3 pc = vertices[ti2].pos;

		vec3 na = vertices[ti0].normal;
		vec3 nb = vertices[ti1].normal;
		vec3 nc = vertices[ti2].normal;

		/*vec3 pa = positions[ti0].xyz;
		vec3 pb = positions[ti1].xyz;
		vec3 pc = positions[ti2].xyz; //technically not needed

		vec3 na = normals[ti0].xyz;
		vec3 nb = normals[ti1].xyz;
		vec3 nc = normals[ti2].xyz;*/

		vec3 s1 = pb - pa;

		vec2 uv = rayQueryGetIntersectionBarycentricsEXT(rq,true);

		float b1 = uv.x;
		float b2 = uv.y;
		float b0 = 1.0f - b1 - b2;
		vec3 bary = {b0,b1,b2};

		vec3 n = normalize(na*bary.x+nb*bary.y+nc*bary.z);
		vec3 dpdu = s1;

		vec3 sh_n = n;
		vec3 sh_s = normalize(dpdu - sh_n * dot(sh_n,dpdu));
		vec3 sh_t = cross(sh_n,sh_s);

		float dist = rayQueryGetIntersectionTEXT(rq,true);
		vec3 pos = dist * direction + origin;
		
		r_data[ix].pos = pos;
		r_data[ix].dist = dist;

		r_data[ix].tri_index = tri_idx;
		r_data[ix].bary = bary;
		r_data[ix].sh_n = sh_n;
		r_data[ix].sh_s = sh_s;
		r_data[ix].sh_t = sh_t;

		//attempt to direct sample a light, ignoring material and light types for now...
		//just going to attempt to connect the position to a light

		vec3 dir2 = lights[0].pos - pos;
		float dist2 = length(dir2);
		float inv_dist = 1.0f / dist2;
		dir2 *= inv_dist;

		rayQueryInitializeEXT(
			rq,tlas,flags,
			0xFF,pos,tmin + 1e-7f,
			dir2,dist2 - 1e-7f
		);

		while(rayQueryProceedEXT(rq));

		if(rayQueryGetIntersectionTypeEXT(rq,true) == gl_RayQueryCommittedIntersectionTriangleEXT)
			r_data[ix].light_pdf = 0.0;
		else
			r_data[ix].light_pdf = 1.0;
	}
	else //no hit, mark -1
	{
		r_data[ix].dist = -1.0;
	}
};